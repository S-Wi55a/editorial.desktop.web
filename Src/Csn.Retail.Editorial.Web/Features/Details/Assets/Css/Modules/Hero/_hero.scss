// Module - Hero

.hero {
    padding-left: 0;
    padding-right: 0;
    min-height: 0;
}

.hero__imageContainer {
    background-color: $cs-darkest-grey;
    position: relative;

    img {
        @include img-responsive();
    }
}

.hero--singleImage,
.hero--doubleImage {
    width: calc(100% - (300px + #{$grid-gutter-width/2}));
    float: left;
    padding-right: 15px;
    padding-left: 15px;

    @include breakpoint($screen-lg) {
        padding-right: 30px;
    }
}

.hero--singleVideo {
    width: calc(100% - (300px + #{$grid-gutter-width/2}));
    float: left;
    padding-right: 0;

    @include breakpoint($screen-lg) {
        padding-right: 15px;
    }
}

.hero.hero--imageAndVideo {

    padding-top: percentage((2/3)*matchingAspectRatioHeight(3/2, (3/2, 16/9))); //Aspect ratio / number of images
    position: relative;
    overflow: hidden;

    .slideshow,
    .brightcove {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    }

    // Move to there own blocks
    .slideshow {
        right: 0;
        width: percentage(matchingAspectRatioHeight(3/2, (3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
    }
    .brightcove {
        left: 0;
        width: percentage(matchingAspectRatioHeight(16/9, (3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
    }
}

@include breakpoint($screen-lg) {
    .hero.hero--imageAndVideo {
        padding-top: percentage((2/3)*matchingAspectRatioHeight(3/2, (3/2, 3/2, 16/9))); //Aspect ratio / number of images

        // Move to there own blocks
        .slideshow {
            width: 2*percentage(matchingAspectRatioHeight(3/2, (3/2, 3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
        }
        .brightcove {
            width: percentage(matchingAspectRatioHeight(16/9, (3/2, 3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
        }
    }
}