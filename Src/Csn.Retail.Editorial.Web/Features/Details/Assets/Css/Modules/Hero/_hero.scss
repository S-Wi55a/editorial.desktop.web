// Module - Hero

.hero {
    padding-left: 0;
    padding-right: 0;
    min-height: 0;

    @include fadeIn();
    animation: fadeIn 1s ease-in;
}

.hero__imageContainer {
    background-color: $cs-dark-grey-3;
    position: relative;

    img {
        @include img-responsive();
    }
}

.hero--singleImage,
.hero--doubleImage {
    position: absolute;
    width: calc(100% - (300px + #{$grid-gutter-width/2}));
    float: left;
    padding-right: 15px;
    padding-left: 15px;

    @include breakpoint($screen-lg) {
        padding-right: 30px;
    }
}

.hero--singleVideo {
    $aside-width: 300px; //TODO: make as global
    $spacing: 30px;

    position:absolute;
    width: calc(#{$screen-md} - #{$aside-width} - #{$spacing*2});

    @include breakpoint($screen-lg) {
        width: calc(#{$screen-lg} - #{$aside-width} - #{$spacing*2});
    }
}

.hero.hero--imageAndVideo {

    padding-top: percentage((2/3)*matchingAspectRatioHeight(3/2, (3/2, 16/9))); //Aspect ratio / number of images
    position: relative;
    overflow: hidden;

    .slideshow,
    .brightcove {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    }

    // Move to there own blocks
    .slideshow {
        right: 0;
        width: percentage(matchingAspectRatioHeight(3/2, (3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
    }
    .brightcove {
        left: 0;
        width: percentage(matchingAspectRatioHeight(16/9, (3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
    }
}

@include breakpoint($screen-lg) {
    .hero.hero--imageAndVideo {
        padding-top: percentage((2/3)*matchingAspectRatioHeight(3/2, (3/2, 3/2, 16/9))); //Aspect ratio / number of images

        // Move to there own blocks
        .slideshow {
            width: 2*percentage(matchingAspectRatioHeight(3/2, (3/2, 3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
        }
        .brightcove {
            width: percentage(matchingAspectRatioHeight(16/9, (3/2, 3/2, 16/9))); //The intersection where 3:2 and 16:9 have the same height
        }
    }
}

//Wide
.hero {

    $ratio: (16/9);
    $height: 640px;

    &--wideImage {
        background-color: $cs-black;
        position: relative;
    }

    &__frame {
        width: 100%;
        max-height: 640px;
        position: relative;
        overflow: hidden;

        &::before {
            content: '';
            display: block;
            padding-top: percentage(1/2.53);
        }
    }

    &__frame-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        max-width: 100%;

        &:not(.csn-parallax) {
            top: 50%;
            left: -50%;
            transform: translate(50%, -50%);
        }
    }

    &__content {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;

        .container {
            height: 100%;
        }
    }

    &__header-container {
        position: relative;
        top: 125px;
    }

    &__heading {
        width: 50%;
        color: $cs-white;
        font-size: emtopx(typeScale(1.2,7), $font-size-body); //57.33089px
        font-weight: $font-weight-600;
        line-height: 1em;
        text-shadow: 1px 1px 3px rgba($cs-black,0.8);


        @include breakpoint($screen-lg) {
            font-size: emtopx(typeScale(1.2,8), $font-size-body); //68.79707px
        }
    }

    &__subheading {
        width: 50%;
        color: $cs-white;
        margin-top: 1em;
        font-size: emtopx(typeScale(1.2,3), $font-size-body); //27.648px
        font-weight: $font-weight-400;
        letter-spacing: 0;
        line-height: 1.3;
        text-shadow: 1px 1px 3px rgba($cs-black,0.8);


        @include breakpoint($screen-lg) {
            font-size: emtopx(typeScale(1.25,3), $font-size-body); //31.25px
            font-weight: $font-weight-400;
            letter-spacing: 0;
            line-height: 1.2
        }
    }

    &__action {
        content: url($image--arrow-down);
        position: absolute;
        bottom: 50px;
        left: 50%;
        transform: translateX(-50%);

        @include bounce();
        animation: bounce 1.5s linear;
        animation-iteration-count: infinite;
    }
}